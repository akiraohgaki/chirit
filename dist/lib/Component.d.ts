import { Dictionary } from './common.js';
import { NodeContentData } from './NodeContent.js';
export default class Component extends HTMLElement {
    private _shadowRoot;
    private _state;
    private _updateLockCount;
    private _updatedCount;
    constructor();
    static define(name: string, options?: ElementDefinitionOptions): void;
    get contentRoot(): ShadowRoot | this;
    set state(state: Dictionary<any>);
    get state(): Dictionary<any>;
    setState(state: Dictionary<any>): void;
    getState(): Dictionary<any>;
    dispatch(type: string, detail?: Dictionary<any>): boolean;
    private _update;
    protected initShadow(): ShadowRoot | null;
    protected initState(): Dictionary<any>;
    protected render(): void;
    protected template(): NodeContentData;
    static get observedAttributes(): Array<string>;
    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null, namespace: string | null): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    adoptedCallback(oldDocument: Document, newDocument: Document): void;
    static get componentObservedAttributes(): Array<string>;
    componentAttributeChangedCallback(_name: string, _oldValue: string | null, _newValue: string | null, _namespace: string | null): void;
    componentConnectedCallback(): void;
    componentDisconnectedCallback(): void;
    componentAdoptedCallback(_oldDocument: Document, _newDocument: Document): void;
    componentStateChangedCallback(_oldState: Dictionary<any>, _newState: Dictionary<any>): void;
    componentUpdatedCallback(): void;
}
